name: Build and Publish

on:
  workflow_dispatch:
  push:
    branches: ["**"]
  pull_request:
    branches: ["**"]
  release:
    types: [published]

permissions:
  contents: read
  id-token: write  # Required for PyPI Trusted Publishing

jobs:
  build:
    name: Build Distributions
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4

      - uses: actions/setup-python@v5
        with:
          python-version: "3.x"

      - name: Install build dependencies
        run: python -m pip install uv

      - name: Install tomli-w for version updating
        if: github.event_name == 'pull_request'
        run: python -m pip install tomli-w

      - name: Create dynamic version for PR builds
        if: github.event_name == 'pull_request'
        run: |
          # Get the base version from pyproject.toml
          BASE_VERSION=$(python -c "import tomllib; print(tomllib.load(open('pyproject.toml', 'rb'))['project']['version'])")
          
          # Create a unique dev version with PR number and run number
          PR_NUMBER=${{ github.event.number }}
          RUN_NUMBER=${{ github.run_number }}
          DEV_VERSION="${BASE_VERSION}.dev${PR_NUMBER}${RUN_NUMBER}"
          
          echo "Creating dev version: $DEV_VERSION"
          
          # Update the version in pyproject.toml
          python -c "
          import tomllib
          import tomli_w
          
          with open('pyproject.toml', 'rb') as f:
              data = tomllib.load(f)
          
          data['project']['version'] = '${DEV_VERSION}'
          
          with open('pyproject.toml', 'wb') as f:
              tomli_w.dump(data, f)
          "

      - name: Build distributions
        run: uv build

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: release-dists
          path: dist/

  publish:
    name: Publish to PyPI
    runs-on: ubuntu-latest
    needs: build
    if: ${{ github.event_name == 'release' || github.event_name == 'workflow_dispatch' }}

    environment:
      name: pypi
      url: https://pypi.org/p/datasheet-for-dataset

    steps:
      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: release-dists
          path: dist/

      - name: Publish distribution ðŸ“¦ to PyPI
        uses: pypa/gh-action-pypi-publish@release/v1
        with:
          packages-dir: dist/

  test-publish:
    name: Publish to testPyPI
    runs-on: ubuntu-latest
    needs: build
    if: github.event_name == 'pull_request' || github.event_name == 'workflow_dispatch'

    environment:
      name: testpypi
      url: https://test.pypi.org/p/datasheet-for-dataset

    steps:
      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: release-dists
          path: dist/

      - name: Publish distribution ðŸ“¦ to TestPyPI
        uses: pypa/gh-action-pypi-publish@release/v1
        with:
          packages-dir: dist/
          repository-url: https://test.pypi.org/legacy/